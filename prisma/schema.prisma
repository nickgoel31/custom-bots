datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  displayName String? @default("")

  likedBots Like[]

  bots Bot[]
  chats Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}
//BOTS
model Bot {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  gender String
  creatorId String @db.ObjectId
  image     String?

  introduction String
  description String

  introMessage String?

  personality String?
  speakingStyle String?
  physicalFeatures String?

  category String @default("Famous People")

  isPublic Boolean @default(false)
  isVerified Boolean @default(false)
  isDraft Boolean @default(false)

  isRoleplay Boolean @default(false)

  botVoice  String?
  
  likes Like[]

  views Int @default(0)
  chats Chat[]
  

  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MessageUser {
  model
  user
}

model Like{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  botId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bot Bot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([userId, botId])

}


model Message {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  senderId String
  senderType MessageUser
  content   String
  image String?
  createdAt DateTime @default(now())
  chatId String @db.ObjectId

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Chat{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  botId String @db.ObjectId
  userId String @db.ObjectId

  customWallpaper String?

  messages Message[]
  bot Bot @relation(fields: [botId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}